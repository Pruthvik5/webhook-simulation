import { init } from '../src/index';
import {
	createUser,
	verifyPhoneno,
	login,
	forgotPassword,
	resetPassword,
	resendOtp,
} from '../src/login';

// mock api calls
jest.mock('../src/apis/auth');

// mocked responses to compare
import {
	createUserSuccess,
	verifyPhoneSuccess,
	loginPhoneSuccess,
	forgotPassSuccess,
	resetPassSuccess,
} from '../src/apis/__mocks__/auth.response';

// init the sdk before executing the tests
beforeAll(() => {
	init({
		"BIZ_ID": 73090796,
		"API_KEY": "e0cae0a32f33313f984da864cdee5db520bb144f",
		"USERNAME": "biz_adm_clients_iQUgwWoZeyTK",
		"ENV": "staging",
		"LANG":"jp"
	})
})

// createUser - success
test('Testing createUser for success', async () => {
	expect.assertions(2);
	const data = {
		phone: '+918618944174',
		password: '123456',
		email: 'sajanm@urbanpiper.com',
		name: 'sjn',
	};
	const resp = await createUser(data);
	expect(resp.success).toBeTruthy();
	expect(resp.data).toEqual(createUserSuccess.data);
});

// createUser - failure
test('Testing createUser for failure by using existing emailId', async () => {
	expect.assertions(2);
	const data = {
		phone: '+918618944174',
		password: '123456',
		email: 'sajan@urbanpiper.com',
		name: 'sjn',
	}
	try {
		await createUser(data);
	} catch(err) {
		expect(err.success).toBeFalsy();
		expect(err.error_message).toBe('A user with the email - sajan@urbanpiper.com already exists. If you believe something is wrong, please write to us at support@urbanpiper.com');
	}
});

// verifyPhoneno - success
test('Testing verifyPhoneno for success by using phoneno and pin', async () => {
	expect.assertions(2);
	const data = {
		phone: '+919753570141',
		pin: '270277',
	}
	const resp = await verifyPhoneno(data);
	expect(resp.success).toBeTruthy();
	expect(resp.data).toEqual(verifyPhoneSuccess.data);
});

// verifyPhoneno - failure
test('Testing verifyPhoneno for failure by using incorrect input', async () => {
	expect.assertions(3);
	const data = {
		phone: '+919753570141',
	}
	const resp = await verifyPhoneno(data);
	expect(resp.success).toBeFalsy();
	expect(resp.data).toEqual({});
	expect(resp.error_message).toBe('Pin can not be blank');
});

// login - phone - success
test('Testing login(phoneno & password) for success', async () => {
	expect.assertions(2);
	const data = {
		phone: '+919753570141',
		password: '123456'
	}
	const resp = await login(data);
	expect(resp.success).toBeTruthy();
	expect(resp.data).toEqual(loginPhoneSuccess.data);
});

// login - phone - failure
test('Testing login(phoneno & password) for failure', async () => {
	expect.assertions(3);
	const data = {
		phone: '+919753570141',
		password: '123455'
	}
	const resp = await login(data);
	expect(resp.success).toBeFalsy();
	expect(resp.data).toEqual({});
	expect(resp.error_message).toBe('Invalid credentials.');
});

// forgotPassword - success
test('Testing forgotPassword for success', async () => {
	expect.assertions(2);
	const data = {
		phone: '+919753570141',
	}
	const resp = await forgotPassword(data);
	expect(resp.success).toBeTruthy();
	expect(resp.data).toEqual(forgotPassSuccess.data);
});

// resetPassword - success
test('Testing resetPassword for success', async () => {
	expect.assertions(3);
	const data = {
		phone: '+919753570141',
		pin: 'abcde',
		new_password1: '123456',
		new_password2: '123456',
	}
	const resp = await resetPassword(data);
	expect(resp.success).toBeTruthy();
	expect(resp.data).toEqual(resetPassSuccess.data);
	expect(resp.error_message).toBe('');
})

// resetPassword - failure - no pin
test('Testing resetPassword for failure (no pin sent)', async () => {
	expect.assertions(3);
	const data = {
		phone: '+919753570141',
		pin: '',
		new_password1: '123456',
		new_password2: '123456',
	}
	const resp = await resetPassword(data);
	expect(resp.success).toBeFalsy();
	expect(resp.data).toEqual({});
	expect(resp.error_message).toBe('PIN can not be blank');
})

// resetPassword - failure - passwords don't match
test('Testing resetPassword for failure (password don\'t match)', async () => {
	expect.assertions(3);
	const data = {
		phone: '+919753570141',
		pin: 'abcde',
		new_password1: '123456',
		new_password2: '123457',
	}
	const resp = await resetPassword(data);
	expect(resp.success).toBeFalsy();
	expect(resp.data).toEqual({});
	expect(resp.error_message).toBe('Invalid passwords');
})

// resendOtp - success
test('Testing resendOtp for success', async () => {
	expect.assertions(3);
	const data = {
		phone: '+919753570141',
	}
	const resp = await resendOtp(data);
	expect(resp.success).toBeTruthy();
	expect(resp.data).toEqual({message: "Card OTP generated and dispatched as SMS."});
	expect(resp.error_message).toBe('');
})

// resendOtp - failure
test('Testing resendOtp for failure', async () => {
	expect.assertions(2);
	const data = {
		phone: '',
	}
	try {
		await resendOtp(data);;
	} catch (err) {
		expect(err.success).toBeFalsy();
		expect(err.error_message).toBe('Phone no is required');
	}
})
