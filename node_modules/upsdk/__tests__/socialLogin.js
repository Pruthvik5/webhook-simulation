import { init } from '../src/index';
import { socialLogin } from '../src/socialLogin';

// mocked response to compare
import { socialLoginRegisterSuccess } from '../src/apis/__mocks__/auth.response';

// mock api calls
jest.mock('../src/apis/auth');
jest.mock('../src/apis/social');

// init the sdk before executing the tests
beforeAll(() => {
	init({
		"BIZ_ID": 73090796,
		"API_KEY": "e0cae0a32f33313f984da864cdee5db520bb144f",
		"USERNAME": "biz_adm_clients_iQUgwWoZeyTK",
		"ENV": "staging",
		"LANG":"jp"
	})
});

describe('Testing socialLogin methods for google', () => {
	it('Testing init for success (Need to verify phone)', async () => {
		expect.assertions(2);
		const sL = socialLogin({ provider: 'google' });
		let resp = await sL.init();
		expect(resp.success).toBeFalsy();
		expect(resp.error_code).toBe('phone_number_required');
	});

	it('Testing checkPhone for success (otp sent)', async () => {
		expect.assertions(2);
		const sL = socialLogin({ provider: 'google' });
		await sL.init();
		let resp = await sL.checkPhone({phone: '+919753570141'});
		expect(resp.success).toBeTruthy();
		expect(resp.reg_state).toBe('otp_sent');
	});

	it('Testing checkPhone for failure (No phoneno passed)', async () => {
		expect.assertions(2);
		const sL = socialLogin({ provider: 'google' });
		await sL.init();
		try {
			await sL.checkPhone({phone: ''})
		} catch (err) {
			expect(err.success).toBeFalsy();
			expect(err.error_message).toBe('Phone no required');
		}
	});

	it('Testing register for success (submitting otp)', async () => {
		expect.assertions(2);
		const sL = socialLogin({ provider: 'google' });
		await sL.init();
		await sL.checkPhone({phone: '+919753570141'});
		let resp = await sL.register({phone: '+919753570141', pin: '270277'});
		expect(resp.success).toBeTruthy();
		expect(resp).toEqual(socialLoginRegisterSuccess);
	});

	it('Testing register for failure (otp not provided)', async () => {
		expect.assertions(2);
		const sL = socialLogin({ provider: 'google' });
		await sL.init();
		await sL.checkPhone({phone: '+919753570141'});
		try {
			await sL.register({phone: '+919753570141'});
		} catch (err) {
			expect(err.success).toBeFalsy();
			expect(err.error_message).toBe('Pin can not be blank');
		}
	});
})

describe('Testing socialLogin methods for facebook', () => {
	it('Testing init for success (Need to verify phone)', async () => {
		expect.assertions(2);
		const sL = socialLogin({ provider: 'facebook' });
		let resp = await sL.init();
		expect(resp.success).toBeFalsy();
		expect(resp.error_code).toBe('phone_number_required');
	});

	it('Testing checkPhone for success (otp sent)', async () => {
		expect.assertions(2);
		const sL = socialLogin({ provider: 'facebook' });
		await sL.init();
		let resp = await sL.checkPhone({phone: '+919753570141'});
		expect(resp.success).toBeTruthy();
		expect(resp.reg_state).toBe('otp_sent');
	});

	it('Testing checkPhone for failure (No phoneno passed)', async () => {
		expect.assertions(2);
		const sL = socialLogin({ provider: 'facebook' });
		await sL.init();
		try {
			await sL.checkPhone({phone: ''})
		} catch (err) {
			expect(err.success).toBeFalsy();
			expect(err.error_message).toBe('Phone no required');
		}
	});

	it('Testing register for success (submitting otp)', async () => {
		expect.assertions(2);
		const sL = socialLogin({ provider: 'facebook' });
		await sL.init();
		await sL.checkPhone({phone: '+919753570141'});
		let resp = await sL.register({phone: '+919753570141', pin: '270277'});
		expect(resp.success).toBeTruthy();
		expect(resp).toEqual(socialLoginRegisterSuccess);
	});

	it('Testing register for failure (otp not provided)', async () => {
		expect.assertions(2);
		const sL = socialLogin({ provider: 'facebook' });
		await sL.init();
		await sL.checkPhone({phone: '+919753570141'});
		try {
			await sL.register({phone: '+919753570141'});
		} catch (err) {
			expect(err.success).toBeFalsy();
			expect(err.error_message).toBe('Pin can not be blank');
		}
	});
})
